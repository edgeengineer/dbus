# Workflow name
name: swift

# Triggers for the workflow
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

# Jobs to run
jobs:
  build-and-test:
    name: Swift ${{ matrix.swift }} on Linux (${{ matrix.artifact-name }})
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact-name: dbus-swift-linux-static-aarch64
            os: ubuntu-22.04-arm
            swift: ["6.1.0"]
            container: swift:6.1.0
            swift-sdk: aarch64-swift-linux-musl
            swift-sdk-url: https://download.swift.org/swift-6.1-release/static-sdk/swift-6.1-RELEASE/swift-6.1-RELEASE_static-linux-0.0.1.artifactbundle.tar.gz
            swift-sdk-checksum: 111c6f7d280a651208b8c74c0521dd99365d785c1976a6e23162f55f65379ac6
          - artifact-name: dbus-swift-linux-static-x86_64
            os: ubuntu-22.04-arm
            swift: ["6.1.0"]
            container: swift:6.1.0
            swift-sdk: x86_64-swift-linux-musl
            swift-sdk-url: https://download.swift.org/swift-6.1-release/static-sdk/swift-6.1-RELEASE/swift-6.1-RELEASE_static-linux-0.0.1.artifactbundle.tar.gz
            swift-sdk-checksum: 111c6f7d280a651208b8c74c0521dd99365d785c1976a6e23162f55f65379ac6
    steps:
    # 1. Check out repository code
    - name: Check out repository code
      uses: actions/checkout@v4
    - name: Install Swift SDK
      if: ${{ matrix.swift-sdk-url != '' }}
      run: |
        swift sdk install ${{ matrix.swift-sdk-url }} --checksum ${{ matrix.swift-sdk-checksum }}

    # === Linux Setup (Ubuntu 22.04) ===
    - name: Build
      shell: bash
      run: |
        args=(
          --configuration release  
        )

        if [ -n "${{ matrix.swift-sdk }}" ]; then
          args+=(--swift-sdk "${{ matrix.swift-sdk }}")
        fi

        swift build "${args[@]}"
    # 8. Run tests
    - name: Run Tests
      shell: bash
      run: |
        args=(
          --configuration release  
        )

        if [ -n "${{ matrix.swift-sdk }}" ]; then
          args+=(--swift-sdk "${{ matrix.swift-sdk }}")
        fi

        swift test --enable-code-coverage "${args[@]}"
        
    # Generate code coverage report
    - name: Generate Code Coverage Report
      shell: bash
      run: |
        llvm-cov export -format="lcov" .build/release/*.xctest -instr-profile .build/release/codecov/default.profdata > coverage.lcov
    
    # Install dependencies for Codecov
    - name: Install dependencies
      shell: bash
      run: |
        apt-get update
        apt-get install -y curl gnupg
    
    # Upload coverage to Codecov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        directory: ./
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false